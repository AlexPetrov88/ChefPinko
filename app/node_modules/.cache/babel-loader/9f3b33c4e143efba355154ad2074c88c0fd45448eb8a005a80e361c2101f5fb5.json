{"ast":null,"code":"// import { createContext, useState, useContext } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import { useLocalStorage } from '../hooks/useLocalStorage';\n\n// import { userServiceFactory } from '../services/userService'; \n\n// export const UserContext = createContext();\n\n// export const AuthProvider = ({\n//     children,\n// }) => {\n//     const [userState, setUserState] = useLocalStorage('user', {});\n//     const navigate = useNavigate();\n\n//     const userService = userServiceFactory(userState.accessToken)\n\n//      // LOGIN\n//   const onLoginSubmit = async (data) => {\n//     if (data.email === '' || data.password === '') {\n//         alert('All fealds are required!');\n//         return;\n//     }\n// try {\n//     const result = await userService.login(data);\n\n//     setUserState(result);\n\n//     navigate('/catalog');\n// } catch (error) {\n//     alert(`error: ${error}`);\n// }\n// };\n\n//     // const onLoginSubmit = async (data) => {\n//     //     try {\n//     //         const result = await authService.login(data);\n\n//     //         setAuth(result);\n\n//     //         navigate('/catalog');\n//     //     } catch (error) {\n//     //         console.log('There is a problem');\n//     //     }\n//     // };\n\n//     // REGISTER\n//   const onRegisterSubmit = async (data) => {\n//     if (data.email === '' || data.password === '') {\n//         alert('All fealds are required!');\n//         return;\n//     } \n\n//     if (data.password !== data['confirm-password']) {\n//         alert('Password don\\'t match');\n//         return;\n//     }\n//     const { confirmPassword, ...registerData } = data;\n//         try {\n//             const result = await userService.register(registerData);\n\n//             setUserState(result);\n\n//             navigate('/catalog');\n//         } catch (error) {\n//             alert(`error: ${error}`);\n//         }\n\n//     };\n\n//     // const onRegisterSubmit = async (values) => {\n//     //     const { confirmPassword, ...registerData } = values;\n//     //     if (confirmPassword !== registerData.password) {\n//     //         return;\n//     //     }\n\n//     //     try {\n//     //         const result = await authService.register(registerData);\n\n//     //         setAuth(result);\n\n//     //         navigate('/catalog');\n//     //     } catch (error) {\n//     //         console.log('There is a problem');\n//     //     }\n//     // };\n\n//      // LOGOUT\n\n//     const onLogoutSubmit = async () => {\n//         await userService.logout();\n//         setUserState({});\n\n//     }  \n\n//     // const onLogout = async () => {\n//     //     await authService.logout();\n\n//     //     setAuth({});\n//     // };\n//     const contextValues = {\n//         onLoginSubmit,\n//         onRegisterSubmit,\n//         onLogoutSubmit,\n//         userId: userState._id,\n//         token: userState.accessToken,\n//         userEmail: userState.email,\n//         isAuthenticated: !!userState.accessToken,\n//     };\n\n//     return (\n//         <>\n//             <UserContext.Provider value={contextValues}>\n//                 {children}\n//             </UserContext.Provider>\n//         </>\n//     )\n// };\n\n// export const useAuthContext = () => {\n//     const context = useContext(UserContext);\n\n//     return context;\n// };","map":{"version":3,"names":[],"sources":["/Users/alexpetrov/JavaScript/ReactApps/projectChefSteps copy/client/src/contexts/UserContext.js"],"sourcesContent":["// import { createContext, useState, useContext } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import { useLocalStorage } from '../hooks/useLocalStorage';\n\n// import { userServiceFactory } from '../services/userService'; \n\n// export const UserContext = createContext();\n\n// export const AuthProvider = ({\n//     children,\n// }) => {\n//     const [userState, setUserState] = useLocalStorage('user', {});\n//     const navigate = useNavigate();\n\n//     const userService = userServiceFactory(userState.accessToken)\n\n//      // LOGIN\n//   const onLoginSubmit = async (data) => {\n//     if (data.email === '' || data.password === '') {\n//         alert('All fealds are required!');\n//         return;\n//     }\n// try {\n//     const result = await userService.login(data);\n\n//     setUserState(result);\n\n//     navigate('/catalog');\n// } catch (error) {\n//     alert(`error: ${error}`);\n// }\n// };\n\n//     // const onLoginSubmit = async (data) => {\n//     //     try {\n//     //         const result = await authService.login(data);\n\n//     //         setAuth(result);\n\n//     //         navigate('/catalog');\n//     //     } catch (error) {\n//     //         console.log('There is a problem');\n//     //     }\n//     // };\n\n//     // REGISTER\n//   const onRegisterSubmit = async (data) => {\n//     if (data.email === '' || data.password === '') {\n//         alert('All fealds are required!');\n//         return;\n//     } \n    \n//     if (data.password !== data['confirm-password']) {\n//         alert('Password don\\'t match');\n//         return;\n//     }\n//     const { confirmPassword, ...registerData } = data;\n//         try {\n//             const result = await userService.register(registerData);\n\n//             setUserState(result);\n\n//             navigate('/catalog');\n//         } catch (error) {\n//             alert(`error: ${error}`);\n//         }\n        \n//     };\n\n\n//     // const onRegisterSubmit = async (values) => {\n//     //     const { confirmPassword, ...registerData } = values;\n//     //     if (confirmPassword !== registerData.password) {\n//     //         return;\n//     //     }\n\n//     //     try {\n//     //         const result = await authService.register(registerData);\n\n//     //         setAuth(result);\n\n//     //         navigate('/catalog');\n//     //     } catch (error) {\n//     //         console.log('There is a problem');\n//     //     }\n//     // };\n\n\n//      // LOGOUT\n\n//     const onLogoutSubmit = async () => {\n//         await userService.logout();\n//         setUserState({});\n        \n//     }  \n\n\n//     // const onLogout = async () => {\n//     //     await authService.logout();\n\n//     //     setAuth({});\n//     // };\n//     const contextValues = {\n//         onLoginSubmit,\n//         onRegisterSubmit,\n//         onLogoutSubmit,\n//         userId: userState._id,\n//         token: userState.accessToken,\n//         userEmail: userState.email,\n//         isAuthenticated: !!userState.accessToken,\n//     };\n\n//     return (\n//         <>\n//             <UserContext.Provider value={contextValues}>\n//                 {children}\n//             </UserContext.Provider>\n//         </>\n//     )\n// };\n\n// export const useAuthContext = () => {\n//     const context = useContext(UserContext);\n\n//     return context;\n// };"],"mappings":"AAAA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}