{"ast":null,"code":"import { getUserData, setUserData, clearUserData } from './util.js';\nconst host = 'http://localhost:3030';\nconst request = async (method, url, data) => {\n  // const options = {};\n\n  // if (method !== 'GET') {\n  //     options.method = method;\n\n  //     if (data) {\n  //         options.headers = {\n  //             'content-type': 'application/json',\n  //         };\n\n  //         options.body = JSON.stringify(data);\n  //     }\n  // }\n\n  // const serializedAuth = localStorage.getItem('auth');\n  // if (serializedAuth) {\n  //     const auth = JSON.parse(serializedAuth);\n\n  //     if (auth.accessToken) {\n  //         options.headers = {\n  //             ...options.headers,\n  //             'X-Authorization': auth.accessToken,\n  //         };\n  //     }\n  // }\n\n  const response = await fetch(url, options);\n  if (response.status === 204) {\n    return {};\n  }\n  const result = await response.json();\n  if (!response.ok) {\n    throw result;\n  }\n  return result;\n};\n\n// async function request(url, options) {\n//   try {\n//     const response = await fetch(host + url, options);\n//     // console.log(response);\n//     if (response.ok !== true) {\n//       if (response.status === 403) {\n//         clearUserData();\n//       }\n//       console.log(`13line response`);\n//       console.log(response);\n//       const error = await response.json();\n//       console.log(`15line errors ${error}`);\n//       console.log(error);\n//       console.log(`16liene options ${options}`);\n//       console.log(options);\n//       throw new Error(error.message);\n//     }\n//     if (response.status === 204) {\n//       return response;\n//     } else {\n//       return response.json();\n//     }\n//   } catch (err) {\n//     alert(err.message);\n//     throw err;\n//   }\n// }\n\nfunction createOptions() {\n  let method = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'get';\n  let data = arguments.length > 1 ? arguments[1] : undefined;\n  const options = {\n    method,\n    headers: {}\n  };\n  if (data !== undefined) {\n    options.headers['Content-Type'] = 'application/json';\n    options.body = JSON.stringify(data);\n  }\n  const userData = getUserData();\n  console.log(`userData befor`);\n  console.log(userData);\n  if (userData != null) {\n    console.log(`userData after`);\n    console.log(userData);\n    options.headers['X-Authorization'] = userData.token;\n  }\n  return options;\n}\nexport async function get(url) {\n  return request(host + url, createOptions());\n}\nexport async function post(url, data) {\n  return request(host + url, createOptions('post', data));\n}\nexport async function put(url, data) {\n  return request(host + url, createOptions('put', data));\n}\nexport async function del(url) {\n  return request(host + url, createOptions('delete'));\n}\nexport async function login(email, password) {\n  const result = await post('/users/login', {\n    email,\n    password\n  });\n  const userData = {\n    email: result.email,\n    id: result._id,\n    token: result.accessToken\n  };\n  setUserData(userData);\n  return userData;\n}\nexport async function register(email, password) {\n  const result = await post('/users/register', {\n    email,\n    password\n  });\n  const userData = {\n    email: result.email,\n    id: result._id,\n    token: result.accessToken\n  };\n  setUserData(userData);\n  return userData;\n}\nexport async function logout() {\n  await get('/users/logout');\n  clearUserData();\n}\n\n//  const request = async(method, url, data) => {\n\n//     const options = {};\n//     if (method !== 'GET') {\n//         options.method = method;\n\n//         if (data) {\n//             options.headers = {\n//                 'content-type': 'application/json',\n//             }\n//             options.body = JSON.stringify(data);\n//         }\n\n//     }\n\n//     const response = await fetch(url, options);\n\n//     try {\n//         const result = await response.json();\n//         return result;\n//     } catch (error) {\n//         return {};\n//     }\n// }\n\n//  const get = request.bind(null,'GET');\n//  const post = request.bind(null,'POST');\n//  const put = request.bind(null,'PUT');\n//  const patch = request.bind(null,'PATCH');\n//  const remove = request.bind(null,'DELETE');\n\n//  export {\n//      get,\n//      post,\n//      put,\n//      patch,\n//      remove\n//  }","map":{"version":3,"names":["getUserData","setUserData","clearUserData","host","request","method","url","data","response","fetch","options","status","result","json","ok","createOptions","arguments","length","undefined","headers","body","JSON","stringify","userData","console","log","token","get","post","put","del","login","email","password","id","_id","accessToken","register","logout"],"sources":["/Users/alexpetrov/Documents/GitTesting/ChefPinko copy/app/src/services/api.js"],"sourcesContent":["import { getUserData, setUserData, clearUserData } from './util.js' \n\nconst host = 'http://localhost:3030';\n\nconst request= async (method, url, data) => {\n  // const options = {};\n\n  // if (method !== 'GET') {\n  //     options.method = method;\n\n  //     if (data) {\n  //         options.headers = {\n  //             'content-type': 'application/json',\n  //         };\n\n  //         options.body = JSON.stringify(data);\n  //     }\n  // }\n\n  // const serializedAuth = localStorage.getItem('auth');\n  // if (serializedAuth) {\n  //     const auth = JSON.parse(serializedAuth);\n      \n  //     if (auth.accessToken) {\n  //         options.headers = {\n  //             ...options.headers,\n  //             'X-Authorization': auth.accessToken,\n  //         };\n  //     }\n  // }\n\n  const response = await fetch(url, options);\n\n  if (response.status === 204) {\n      return {};\n  }\n\n  const result = await response.json();\n\n  if (!response.ok) {\n      throw result;\n  }\n\n  return result;\n};\n\n// async function request(url, options) {\n//   try {\n//     const response = await fetch(host + url, options);\n//     // console.log(response);\n//     if (response.ok !== true) {\n//       if (response.status === 403) {\n//         clearUserData();\n//       }\n//       console.log(`13line response`);\n//       console.log(response);\n//       const error = await response.json();\n//       console.log(`15line errors ${error}`);\n//       console.log(error);\n//       console.log(`16liene options ${options}`);\n//       console.log(options);\n//       throw new Error(error.message);\n//     }\n//     if (response.status === 204) {\n//       return response;\n//     } else {\n//       return response.json();\n//     }\n//   } catch (err) {\n//     alert(err.message);\n//     throw err;\n//   }\n// }\n\nfunction createOptions(method = 'get', data) {\n  const options = {\n    method,\n    headers: {}\n};\n  if (data !== undefined) {\n    options.headers['Content-Type'] = 'application/json';\n    options.body = JSON.stringify(data);\n}\n  const userData = getUserData();\n  console.log(`userData befor`);\n  console.log(userData);\n  if (userData != null) {\n  console.log(`userData after`);\n  console.log(userData);\n    options.headers['X-Authorization'] = userData.token;\n  }\n  return options;\n}\n\nexport async function get(url) {\n  return request(host + url, createOptions());\n}\nexport async function post(url, data) {\n  return request(host + url, createOptions('post', data));\n}\nexport async function put(url, data) {\n  return request(host + url, createOptions('put', data));\n}\nexport async function del(url) {\n  return request(host + url, createOptions('delete'));\n}\n\nexport async function login(email, password) {\n  const result = await post('/users/login', { email, password });\n  const userData = {\n  email: result.email,\n  id: result._id,\n  token: result.accessToken\n  };\n  setUserData(userData);\n  return userData;\n}\n\nexport async function register(email, password) {\n  const result = await post('/users/register', {email, password});\n  const userData = {\n  email: result.email, \n  id: result._id, \n  token: result.accessToken,\n  };\n  setUserData(userData);\n  return userData;\n}\n\nexport async function logout() {\n  await get('/users/logout'); \n  clearUserData();\n}\n\n\n\n//  const request = async(method, url, data) => {\n\n//     const options = {};\n//     if (method !== 'GET') {\n//         options.method = method;\n\n//         if (data) {\n//             options.headers = {\n//                 'content-type': 'application/json',\n//             }\n//             options.body = JSON.stringify(data);\n//         }\n\n//     }\n\n//     const response = await fetch(url, options);\n\n//     try {\n//         const result = await response.json();\n//         return result;\n//     } catch (error) {\n//         return {};\n//     }\n// }\n\n//  const get = request.bind(null,'GET');\n//  const post = request.bind(null,'POST');\n//  const put = request.bind(null,'PUT');\n//  const patch = request.bind(null,'PATCH');\n//  const remove = request.bind(null,'DELETE');\n\n//  export {\n//      get,\n//      post,\n//      put,\n//      patch,\n//      remove\n//  }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}