{"ast":null,"code":"import { getUserData, setUserData, clearUserData } from './util.js';\nconst host = 'http://localhost:3030';\nconst request = async (method, url, data) => {\n  const options = {};\n  if (method !== 'GET') {\n    options.method = method;\n    if (data) {\n      options.headers = {\n        'content-type': 'application/json'\n      };\n      options.body = JSON.stringify(data);\n    }\n  }\n  const serializedAuth = localStorage.getItem('auth');\n  if (serializedAuth) {\n    const auth = JSON.parse(serializedAuth);\n    if (auth.accessToken) {\n      options.headers = {\n        ...options.headers,\n        'X-Authorization': auth.accessToken\n      };\n    }\n  }\n  const response = await fetch(url, options);\n  if (response.status === 204) {\n    return {};\n  }\n  const result = await response.json();\n  if (!response.ok) {\n    throw result;\n  }\n  return result;\n};\n\n// async function request(url, options) {\n//   try {\n//     const response = await fetch(host + url, options);\n//     // console.log(response);\n//     if (response.ok !== true) {\n//       if (response.status === 403) {\n//         clearUserData();\n//       }\n//       console.log(`13line response`);\n//       console.log(response);\n//       const error = await response.json();\n//       console.log(`15line errors ${error}`);\n//       console.log(error);\n//       console.log(`16liene options ${options}`);\n//       console.log(options);\n//       throw new Error(error.message);\n//     }\n//     if (response.status === 204) {\n//       return response;\n//     } else {\n//       return response.json();\n//     }\n//   } catch (err) {\n//     alert(err.message);\n//     throw err;\n//   }\n// }\n\nfunction createOptions() {\n  let method = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'get';\n  let data = arguments.length > 1 ? arguments[1] : undefined;\n  const options = {\n    method,\n    headers: {}\n  };\n  if (data !== undefined) {\n    options.headers['Content-Type'] = 'application/json';\n    options.body = JSON.stringify(data);\n  }\n  const userData = getUserData();\n  console.log(`userData befor`);\n  console.log(userData);\n  if (userData != null) {\n    console.log(`userData after`);\n    console.log(userData);\n    options.headers['X-Authorization'] = userData.token;\n  }\n  return options;\n}\nexport async function get(url) {\n  return request(host + url, createOptions());\n}\nexport async function post(url, data) {\n  return request(host + url, createOptions('post', data));\n}\nexport async function put(url, data) {\n  return request(host + url, createOptions('put', data));\n}\nexport async function del(url) {\n  return request(host + url, createOptions('delete'));\n}\nexport async function login(email, password) {\n  const result = await post('/users/login', {\n    email,\n    password\n  });\n  const userData = {\n    email: result.email,\n    id: result._id,\n    token: result.accessToken\n  };\n  setUserData(userData);\n  return userData;\n}\nexport async function register(email, password) {\n  const result = await post('/users/register', {\n    email,\n    password\n  });\n  const userData = {\n    email: result.email,\n    id: result._id,\n    token: result.accessToken\n  };\n  setUserData(userData);\n  return userData;\n}\nexport async function logout() {\n  await get('/users/logout');\n  clearUserData();\n}\n\n//  const request = async(method, url, data) => {\n\n//     const options = {};\n//     if (method !== 'GET') {\n//         options.method = method;\n\n//         if (data) {\n//             options.headers = {\n//                 'content-type': 'application/json',\n//             }\n//             options.body = JSON.stringify(data);\n//         }\n\n//     }\n\n//     const response = await fetch(url, options);\n\n//     try {\n//         const result = await response.json();\n//         return result;\n//     } catch (error) {\n//         return {};\n//     }\n// }\n\n//  const get = request.bind(null,'GET');\n//  const post = request.bind(null,'POST');\n//  const put = request.bind(null,'PUT');\n//  const patch = request.bind(null,'PATCH');\n//  const remove = request.bind(null,'DELETE');\n\n//  export {\n//      get,\n//      post,\n//      put,\n//      patch,\n//      remove\n//  }","map":{"version":3,"names":["getUserData","setUserData","clearUserData","host","request","method","url","data","options","headers","body","JSON","stringify","serializedAuth","localStorage","getItem","auth","parse","accessToken","response","fetch","status","result","json","ok","createOptions","arguments","length","undefined","userData","console","log","token","get","post","put","del","login","email","password","id","_id","register","logout"],"sources":["/Users/alexpetrov/Documents/GitTesting/ChefPinko copy/app/src/services/api.js"],"sourcesContent":["import { getUserData, setUserData, clearUserData } from './util.js' \n\nconst host = 'http://localhost:3030';\n\nconst request= async (method, url, data) => {\n  const options = {};\n\n  if (method !== 'GET') {\n      options.method = method;\n\n      if (data) {\n          options.headers = {\n              'content-type': 'application/json',\n          };\n\n          options.body = JSON.stringify(data);\n      }\n  }\n\n  const serializedAuth = localStorage.getItem('auth');\n  if (serializedAuth) {\n      const auth = JSON.parse(serializedAuth);\n      \n      if (auth.accessToken) {\n          options.headers = {\n              ...options.headers,\n              'X-Authorization': auth.accessToken,\n          };\n      }\n  }\n\n  const response = await fetch(url, options);\n\n  if (response.status === 204) {\n      return {};\n  }\n\n  const result = await response.json();\n\n  if (!response.ok) {\n      throw result;\n  }\n\n  return result;\n};\n\n// async function request(url, options) {\n//   try {\n//     const response = await fetch(host + url, options);\n//     // console.log(response);\n//     if (response.ok !== true) {\n//       if (response.status === 403) {\n//         clearUserData();\n//       }\n//       console.log(`13line response`);\n//       console.log(response);\n//       const error = await response.json();\n//       console.log(`15line errors ${error}`);\n//       console.log(error);\n//       console.log(`16liene options ${options}`);\n//       console.log(options);\n//       throw new Error(error.message);\n//     }\n//     if (response.status === 204) {\n//       return response;\n//     } else {\n//       return response.json();\n//     }\n//   } catch (err) {\n//     alert(err.message);\n//     throw err;\n//   }\n// }\n\nfunction createOptions(method = 'get', data) {\n  const options = {\n    method,\n    headers: {}\n};\n  if (data !== undefined) {\n    options.headers['Content-Type'] = 'application/json';\n    options.body = JSON.stringify(data);\n}\n  const userData = getUserData();\n  console.log(`userData befor`);\n  console.log(userData);\n  if (userData != null) {\n  console.log(`userData after`);\n  console.log(userData);\n    options.headers['X-Authorization'] = userData.token;\n  }\n  return options;\n}\n\nexport async function get(url) {\n  return request(host + url, createOptions());\n}\nexport async function post(url, data) {\n  return request(host + url, createOptions('post', data));\n}\nexport async function put(url, data) {\n  return request(host + url, createOptions('put', data));\n}\nexport async function del(url) {\n  return request(host + url, createOptions('delete'));\n}\n\nexport async function login(email, password) {\n  const result = await post('/users/login', { email, password });\n  const userData = {\n  email: result.email,\n  id: result._id,\n  token: result.accessToken\n  };\n  setUserData(userData);\n  return userData;\n}\n\nexport async function register(email, password) {\n  const result = await post('/users/register', {email, password});\n  const userData = {\n  email: result.email, \n  id: result._id, \n  token: result.accessToken,\n  };\n  setUserData(userData);\n  return userData;\n}\n\nexport async function logout() {\n  await get('/users/logout'); \n  clearUserData();\n}\n\n\n\n//  const request = async(method, url, data) => {\n\n//     const options = {};\n//     if (method !== 'GET') {\n//         options.method = method;\n\n//         if (data) {\n//             options.headers = {\n//                 'content-type': 'application/json',\n//             }\n//             options.body = JSON.stringify(data);\n//         }\n\n//     }\n\n//     const response = await fetch(url, options);\n\n//     try {\n//         const result = await response.json();\n//         return result;\n//     } catch (error) {\n//         return {};\n//     }\n// }\n\n//  const get = request.bind(null,'GET');\n//  const post = request.bind(null,'POST');\n//  const put = request.bind(null,'PUT');\n//  const patch = request.bind(null,'PATCH');\n//  const remove = request.bind(null,'DELETE');\n\n//  export {\n//      get,\n//      post,\n//      put,\n//      patch,\n//      remove\n//  }"],"mappings":"AAAA,SAASA,WAAW,EAAEC,WAAW,EAAEC,aAAa,QAAQ,WAAW;AAEnE,MAAMC,IAAI,GAAG,uBAAuB;AAEpC,MAAMC,OAAO,GAAE,MAAAA,CAAOC,MAAM,EAAEC,GAAG,EAAEC,IAAI,KAAK;EAC1C,MAAMC,OAAO,GAAG,CAAC,CAAC;EAElB,IAAIH,MAAM,KAAK,KAAK,EAAE;IAClBG,OAAO,CAACH,MAAM,GAAGA,MAAM;IAEvB,IAAIE,IAAI,EAAE;MACNC,OAAO,CAACC,OAAO,GAAG;QACd,cAAc,EAAE;MACpB,CAAC;MAEDD,OAAO,CAACE,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACL,IAAI,CAAC;IACvC;EACJ;EAEA,MAAMM,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EACnD,IAAIF,cAAc,EAAE;IAChB,MAAMG,IAAI,GAAGL,IAAI,CAACM,KAAK,CAACJ,cAAc,CAAC;IAEvC,IAAIG,IAAI,CAACE,WAAW,EAAE;MAClBV,OAAO,CAACC,OAAO,GAAG;QACd,GAAGD,OAAO,CAACC,OAAO;QAClB,iBAAiB,EAAEO,IAAI,CAACE;MAC5B,CAAC;IACL;EACJ;EAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACd,GAAG,EAAEE,OAAO,CAAC;EAE1C,IAAIW,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;IACzB,OAAO,CAAC,CAAC;EACb;EAEA,MAAMC,MAAM,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;EAEpC,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;IACd,MAAMF,MAAM;EAChB;EAEA,OAAOA,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASG,aAAaA,CAAA,EAAuB;EAAA,IAAtBpB,MAAM,GAAAqB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAAA,IAAEnB,IAAI,GAAAmB,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACzC,MAAMpB,OAAO,GAAG;IACdH,MAAM;IACNI,OAAO,EAAE,CAAC;EACd,CAAC;EACC,IAAIF,IAAI,KAAKqB,SAAS,EAAE;IACtBpB,OAAO,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,kBAAkB;IACpDD,OAAO,CAACE,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACL,IAAI,CAAC;EACvC;EACE,MAAMsB,QAAQ,GAAG7B,WAAW,EAAE;EAC9B8B,OAAO,CAACC,GAAG,CAAE,gBAAe,CAAC;EAC7BD,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;EACrB,IAAIA,QAAQ,IAAI,IAAI,EAAE;IACtBC,OAAO,CAACC,GAAG,CAAE,gBAAe,CAAC;IAC7BD,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;IACnBrB,OAAO,CAACC,OAAO,CAAC,iBAAiB,CAAC,GAAGoB,QAAQ,CAACG,KAAK;EACrD;EACA,OAAOxB,OAAO;AAChB;AAEA,OAAO,eAAeyB,GAAGA,CAAC3B,GAAG,EAAE;EAC7B,OAAOF,OAAO,CAACD,IAAI,GAAGG,GAAG,EAAEmB,aAAa,EAAE,CAAC;AAC7C;AACA,OAAO,eAAeS,IAAIA,CAAC5B,GAAG,EAAEC,IAAI,EAAE;EACpC,OAAOH,OAAO,CAACD,IAAI,GAAGG,GAAG,EAAEmB,aAAa,CAAC,MAAM,EAAElB,IAAI,CAAC,CAAC;AACzD;AACA,OAAO,eAAe4B,GAAGA,CAAC7B,GAAG,EAAEC,IAAI,EAAE;EACnC,OAAOH,OAAO,CAACD,IAAI,GAAGG,GAAG,EAAEmB,aAAa,CAAC,KAAK,EAAElB,IAAI,CAAC,CAAC;AACxD;AACA,OAAO,eAAe6B,GAAGA,CAAC9B,GAAG,EAAE;EAC7B,OAAOF,OAAO,CAACD,IAAI,GAAGG,GAAG,EAAEmB,aAAa,CAAC,QAAQ,CAAC,CAAC;AACrD;AAEA,OAAO,eAAeY,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EAC3C,MAAMjB,MAAM,GAAG,MAAMY,IAAI,CAAC,cAAc,EAAE;IAAEI,KAAK;IAAEC;EAAS,CAAC,CAAC;EAC9D,MAAMV,QAAQ,GAAG;IACjBS,KAAK,EAAEhB,MAAM,CAACgB,KAAK;IACnBE,EAAE,EAAElB,MAAM,CAACmB,GAAG;IACdT,KAAK,EAAEV,MAAM,CAACJ;EACd,CAAC;EACDjB,WAAW,CAAC4B,QAAQ,CAAC;EACrB,OAAOA,QAAQ;AACjB;AAEA,OAAO,eAAea,QAAQA,CAACJ,KAAK,EAAEC,QAAQ,EAAE;EAC9C,MAAMjB,MAAM,GAAG,MAAMY,IAAI,CAAC,iBAAiB,EAAE;IAACI,KAAK;IAAEC;EAAQ,CAAC,CAAC;EAC/D,MAAMV,QAAQ,GAAG;IACjBS,KAAK,EAAEhB,MAAM,CAACgB,KAAK;IACnBE,EAAE,EAAElB,MAAM,CAACmB,GAAG;IACdT,KAAK,EAAEV,MAAM,CAACJ;EACd,CAAC;EACDjB,WAAW,CAAC4B,QAAQ,CAAC;EACrB,OAAOA,QAAQ;AACjB;AAEA,OAAO,eAAec,MAAMA,CAAA,EAAG;EAC7B,MAAMV,GAAG,CAAC,eAAe,CAAC;EAC1B/B,aAAa,EAAE;AACjB;;AAIA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}