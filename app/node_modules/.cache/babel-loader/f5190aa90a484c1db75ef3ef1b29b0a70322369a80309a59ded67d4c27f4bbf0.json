{"ast":null,"code":"var _jsxFileName = \"/Users/alexpetrov/Documents/GitTesting/ChefPinko copy copy/app/src/components/GuideAndTools/Tools.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import YouTube from 'react-youtube';\n\n// export const Tools = () => {\n//   const [videoId, setVideoId] = useState('VIDEO_ID');\n\n//   const handleVideoChange = (event) => {\n//     const newVideoId = event.target.value;\n//     setVideoId(newVideoId);\n//   };\n\n//   const opts = {\n//     height: '360',\n//     width: '640',\n//     playerVars: {\n//       autoplay: 1,\n//     },\n//   };\n\n//   return (\n//     <div>\n//       <h2>YouTube Video Player</h2>\n//       <label htmlFor=\"videoId\">Enter YouTube Video ID:</label>\n//       <input id=\"videoId\" type=\"text\" onChange={handleVideoChange} value={videoId} />\n//       <br />\n//       <YouTube videoId={videoId} opts={opts} />\n//     </div>\n//   );\n// };\n\n// import React from 'react';\n\n// export const Tools = () => {\n//   return (\n//     <div>\n//       <h2>Video Player</h2>\n//       <video controls>\n//         <source src=\"../../../public/images/1.mp4\" type=\"video/mp4\" />\n//         Your browser does not support the video tag.\n//       </video>\n//     </div>\n//   );\n// };\n\n// import React from 'react';\n\n// export function Tools() {\n//   return (\n//     <div>\n//       <video controls>\n//         <source src=\"../../../public/video/1.mp4\" type=\"video/mp4\" />\n//         Your browser does not support the video tag.\n//       </video>\n//     </div>\n//   );\n// }\n\nimport ReactPlayer from 'react-player';\nimport React, { useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst VIDEO_PATH = 'https://www.youtube.com/watch?v=2fOtug1CXxc';\nexport function Tools() {\n  _s();\n  const playerRef = useRef(null);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ReactPlayer, {\n        ref: playerRef,\n        url: VIDEO_PATH,\n        controls: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      class: \"content\",\n      children: [\"If you're looking for more information on a particular topic, it can be frustrating to be limited by a short blurb or summary. That's where the \", /*#__PURE__*/_jsxDEV(\"span\", {\n        class: \"read-more\",\n        children: \"Read More\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 176\n      }, this), \" button comes in handy. By clicking on it, you can expand the content and get a more in-depth look at what you're interested in. On the other hand, sometimes you just want a quick overview without having to scroll through a lot of text. In those cases, the \", /*#__PURE__*/_jsxDEV(\"span\", {\n        class: \"show-less\",\n        children: \"Show Less\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 473\n      }, this), \" option is perfect - it allows you to condense the content to just the essentials, giving you a clearer view of what you're looking at. So whether you want to dive deep or just skim the surface, these options can help you get the most out of your reading experience.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Tools, \"ezlvRaRDG1HW7XN2TkWUyOHHTRM=\");\n_c = Tools;\n;\n// export default Tools;\n\n// import YouTube from 'react-youtube';\n\n// export const Tools = () => {\n\n//     const videoId = \"v=veRGP3hemLQ&t=2647s\";\n//     const opts = {\n//         height: '360',\n//         width: '640',\n//         playerVars: {\n//           autoplay: 1,\n//         },\n//     };\n\n//     return(\n//         <div>\n//         <h2>YouTube Video Player</h2>\n//         <br />\n//         <YouTube videoId={videoId} opts={opts} />\n//     </div>\n//     );\n// }\n\n// import React from 'react';\n// import YouTube from 'react-youtube';\n\n// export const Tools = () => {\n//   const opts = {\n//     height: '360',\n//     width: '640',\n//     playerVars: {\n//       autoplay: 1,\n//     },\n//   };\n\n//   return (\n//     <div>\n//       <h2>YouTube Video Player</h2>\n//       <YouTube videoId=\"v=L_Guz73e6fw\" opts={opts} />\n//     </div>\n//   );\n// };\nvar _c;\n$RefreshReg$(_c, \"Tools\");","map":{"version":3,"names":["ReactPlayer","React","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","VIDEO_PATH","Tools","_s","playerRef","children","ref","url","controls","fileName","_jsxFileName","lineNumber","columnNumber","class","_c","$RefreshReg$"],"sources":["/Users/alexpetrov/Documents/GitTesting/ChefPinko copy copy/app/src/components/GuideAndTools/Tools.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import YouTube from 'react-youtube';\n\n// export const Tools = () => {\n//   const [videoId, setVideoId] = useState('VIDEO_ID');\n\n//   const handleVideoChange = (event) => {\n//     const newVideoId = event.target.value;\n//     setVideoId(newVideoId);\n//   };\n\n//   const opts = {\n//     height: '360',\n//     width: '640',\n//     playerVars: {\n//       autoplay: 1,\n//     },\n//   };\n\n//   return (\n//     <div>\n//       <h2>YouTube Video Player</h2>\n//       <label htmlFor=\"videoId\">Enter YouTube Video ID:</label>\n//       <input id=\"videoId\" type=\"text\" onChange={handleVideoChange} value={videoId} />\n//       <br />\n//       <YouTube videoId={videoId} opts={opts} />\n//     </div>\n//   );\n// };\n\n\n\n// import React from 'react';\n\n// export const Tools = () => {\n//   return (\n//     <div>\n//       <h2>Video Player</h2>\n//       <video controls>\n//         <source src=\"../../../public/images/1.mp4\" type=\"video/mp4\" />\n//         Your browser does not support the video tag.\n//       </video>\n//     </div>\n//   );\n// };\n\n\n// import React from 'react';\n\n// export function Tools() {\n//   return (\n//     <div>\n//       <video controls>\n//         <source src=\"../../../public/video/1.mp4\" type=\"video/mp4\" />\n//         Your browser does not support the video tag.\n//       </video>\n//     </div>\n//   );\n// }\n\nimport ReactPlayer from 'react-player';\nimport React, { useRef } from 'react';\nconst VIDEO_PATH = 'https://www.youtube.com/watch?v=2fOtug1CXxc';\nexport function Tools() {\n   const playerRef = useRef(null);\n   return (\n        <>\n            <div>\n                <ReactPlayer ref={playerRef} url={VIDEO_PATH} controls={true} />\n            </div>\n            <p class=\"content\">If you're looking for more information on a particular topic, it can be frustrating to be limited by a short blurb or summary. That's where the <span class=\"read-more\">Read More</span> button comes in handy. By clicking on it, you can expand the content and get a more in-depth look at what you're interested in. On the other hand, sometimes you just want a quick overview without having to scroll through a lot of text. In those cases, the <span class=\"show-less\">Show Less</span> option is perfect - it allows you to condense the content to just the essentials, giving you a clearer view of what you're looking at. So whether you want to dive deep or just skim the surface, these options can help you get the most out of your reading experience.</p>\n        </>\n   )\n};\n// export default Tools;\n\n\n\n// import YouTube from 'react-youtube';\n\n// export const Tools = () => {\n\n//     const videoId = \"v=veRGP3hemLQ&t=2647s\";\n//     const opts = {\n//         height: '360',\n//         width: '640',\n//         playerVars: {\n//           autoplay: 1,\n//         },\n//     };\n\n//     return(\n//         <div>\n//         <h2>YouTube Video Player</h2>\n//         <br />\n//         <YouTube videoId={videoId} opts={opts} />\n//     </div>\n//     );\n// }\n\n// import React from 'react';\n// import YouTube from 'react-youtube';\n\n// export const Tools = () => {\n//   const opts = {\n//     height: '360',\n//     width: '640',\n//     playerVars: {\n//       autoplay: 1,\n//     },\n//   };\n\n//   return (\n//     <div>\n//       <h2>YouTube Video Player</h2>\n//       <YouTube videoId=\"v=L_Guz73e6fw\" opts={opts} />\n//     </div>\n//   );\n// };\n\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,WAAW,MAAM,cAAc;AACtC,OAAOC,KAAK,IAAIC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACtC,MAAMC,UAAU,GAAG,6CAA6C;AAChE,OAAO,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAMC,SAAS,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC9B,oBACKE,OAAA,CAAAE,SAAA;IAAAK,QAAA,gBACIP,OAAA;MAAAO,QAAA,eACIP,OAAA,CAACJ,WAAW;QAACY,GAAG,EAAEF,SAAU;QAACG,GAAG,EAAEN,UAAW;QAACO,QAAQ,EAAE;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAG;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC9D,eACNd,OAAA;MAAGe,KAAK,EAAC,SAAS;MAAAR,QAAA,GAAC,kJAAgJ,eAAAP,OAAA;QAAMe,KAAK,EAAC,WAAW;QAAAR,QAAA,EAAC;MAAS;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAO,qQAAiQ,eAAAd,OAAA;QAAMe,KAAK,EAAC,WAAW;QAAAR,QAAA,EAAC;MAAS;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAO,8QAA0Q;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI;EAAA,gBACnwB;AAEX;AAACT,EAAA,CAVeD,KAAK;AAAAY,EAAA,GAALZ,KAAK;AAUpB;AACD;;AAIA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}