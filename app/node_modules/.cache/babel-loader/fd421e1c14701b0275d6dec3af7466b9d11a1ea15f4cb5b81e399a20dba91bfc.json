{"ast":null,"code":"import { getUserData, setUserData, clearUserData } from './util.js';\nconst host = 'http://localhost:3030';\nasync function request(method, token, url, data) {\n  const options = {\n    method,\n    headers: {}\n  };\n  if (data !== undefined) {\n    options.headers['Content-Type'] = 'application/json';\n    options.body = JSON.stringify(data);\n  }\n  if (token) {\n    options.headers['X-Authorization'] = token;\n  }\n  try {\n    const response = await fetch(host + url, options);\n    if (response.ok !== true) {\n      // if (response.status === 403) {\n      //   clearUserData();\n      // }\n      const error = await response.json();\n      throw new Error(error.message);\n    }\n    if (response.status === 204) {\n      return response;\n    } else {\n      return response.json();\n    }\n  } catch (err) {\n    alert(err.message);\n    throw err;\n  }\n}\n\n// function createOptions(method = 'get', token, data) {\n//   const options = {\n//     method,\n//     headers: {}\n// };\n//   if (data !== undefined) {\n//     options.headers['Content-Type'] = 'application/json';\n//     options.body = JSON.stringify(data);\n// }\n//   if(token) {\n//     options.headers['X-Authorization'] = token;\n//   }\n//   // const userData = getUserData();\n//   // if (userData != null) {\n//   //   options.headers['X-Authorization'] = userData.token;\n//   // }\n//   return options;\n// }\n\nexport const apiFactory = token => {\n  return {\n    get: request.bind(null, 'GET', token),\n    post: request.bind(null, 'POST', token),\n    put: request.bind(null, 'PUT', token),\n    patch: request.bind(null, 'PATCH', token),\n    delete: request.bind(null, 'DELETE', token)\n  };\n};\n\n// export async function get(url, token) {\n//     return request(url, createOptions('get', token));\n//     }\n// export async function post(url, token, data) {\n//     return request(url, createOptions('post', token, data));\n//     }\n// export async function put(url, token, data) {\n//     return request(url, createOptions('put', token, data));\n//     }\n// export async function del(url, token) {\n//     return request(url, createOptions('delete', token));\n//     }\n\n// export const apiFactory = (token) => {\n//   return {\n//       get: request.bind(null, 'GET', token),\n//       post: request.bind(null, 'POST', token),\n//       put: request.bind(null, 'PUT', token),\n//       patch: request.bind(null, 'PATCH', token),\n//       delete: request.bind(null, 'DELETE', token),\n//   }\n// };\n\n//  const request = async(method, url, data) => {\n\n//     const options = {};\n//     if (method !== 'GET') {\n//         options.method = method;\n\n//         if (data) {\n//             options.headers = {\n//                 'content-type': 'application/json',\n//             }\n//             options.body = JSON.stringify(data);\n//         }\n\n//     }\n\n//     const response = await fetch(url, options);\n\n//     try {\n//         const result = await response.json();\n//         return result;\n//     } catch (error) {\n//         return {};\n//     }\n// }\n\n//  const get = request.bind(null,'GET');\n//  const post = request.bind(null,'POST');\n//  const put = request.bind(null,'PUT');\n//  const patch = request.bind(null,'PATCH');\n//  const remove = request.bind(null,'DELETE');\n\n//  export {\n//      get,\n//      post,\n//      put,\n//      patch,\n//      remove\n//  }","map":{"version":3,"names":["getUserData","setUserData","clearUserData","host","request","method","token","url","data","options","headers","undefined","body","JSON","stringify","response","fetch","ok","error","json","Error","message","status","err","alert","apiFactory","get","bind","post","put","patch","delete"],"sources":["/Users/alexpetrov/JavaScript/ReactApps/projectChefSteps copy/client/src/services/api.js"],"sourcesContent":["import { getUserData, setUserData, clearUserData } from './util.js' \n\nconst host = 'http://localhost:3030';\n\nasync function request(method, token, url, data) {\n\n  const options = {\n    method,\n    headers: {}\n};\n  if (data !== undefined) {\n    options.headers['Content-Type'] = 'application/json';\n    options.body = JSON.stringify(data);\n}\n  if(token) {\n    options.headers['X-Authorization'] = token;\n  }\n  \n  try {\n    const response = await fetch(host + url, options);\n    if (response.ok !== true) {\n      // if (response.status === 403) {\n      //   clearUserData();\n      // }\n      const error = await response.json();\n      throw new Error(error.message);\n    }\n    if (response.status === 204) {\n      return response;\n    } else {\n      return response.json();\n    }\n  } catch (err) {\n    alert(err.message);\n    throw err;\n  }\n}\n\n// function createOptions(method = 'get', token, data) {\n//   const options = {\n//     method,\n//     headers: {}\n// };\n//   if (data !== undefined) {\n//     options.headers['Content-Type'] = 'application/json';\n//     options.body = JSON.stringify(data);\n// }\n//   if(token) {\n//     options.headers['X-Authorization'] = token;\n//   }\n//   // const userData = getUserData();\n//   // if (userData != null) {\n//   //   options.headers['X-Authorization'] = userData.token;\n//   // }\n//   return options;\n// }\n\n  export const apiFactory = (token) => {\n      return {\n          get: request.bind(null, 'GET', token),\n          post: request.bind(null, 'POST', token),\n          put: request.bind(null, 'PUT', token),\n          patch: request.bind(null, 'PATCH', token),\n          delete: request.bind(null, 'DELETE', token),\n      }\n  };\n\n\n  // export async function get(url, token) {\n  //     return request(url, createOptions('get', token));\n  //     }\n  // export async function post(url, token, data) {\n  //     return request(url, createOptions('post', token, data));\n  //     }\n  // export async function put(url, token, data) {\n  //     return request(url, createOptions('put', token, data));\n  //     }\n  // export async function del(url, token) {\n  //     return request(url, createOptions('delete', token));\n  //     }\n        \n        // export const apiFactory = (token) => {\n        //   return {\n        //       get: request.bind(null, 'GET', token),\n        //       post: request.bind(null, 'POST', token),\n        //       put: request.bind(null, 'PUT', token),\n        //       patch: request.bind(null, 'PATCH', token),\n        //       delete: request.bind(null, 'DELETE', token),\n        //   }\n        // };\n\n\n\n\n\n\n\n\n\n\n//  const request = async(method, url, data) => {\n\n//     const options = {};\n//     if (method !== 'GET') {\n//         options.method = method;\n\n//         if (data) {\n//             options.headers = {\n//                 'content-type': 'application/json',\n//             }\n//             options.body = JSON.stringify(data);\n//         }\n\n//     }\n\n//     const response = await fetch(url, options);\n\n//     try {\n//         const result = await response.json();\n//         return result;\n//     } catch (error) {\n//         return {};\n//     }\n// }\n\n//  const get = request.bind(null,'GET');\n//  const post = request.bind(null,'POST');\n//  const put = request.bind(null,'PUT');\n//  const patch = request.bind(null,'PATCH');\n//  const remove = request.bind(null,'DELETE');\n\n//  export {\n//      get,\n//      post,\n//      put,\n//      patch,\n//      remove\n//  }"],"mappings":"AAAA,SAASA,WAAW,EAAEC,WAAW,EAAEC,aAAa,QAAQ,WAAW;AAEnE,MAAMC,IAAI,GAAG,uBAAuB;AAEpC,eAAeC,OAAOA,CAACC,MAAM,EAAEC,KAAK,EAAEC,GAAG,EAAEC,IAAI,EAAE;EAE/C,MAAMC,OAAO,GAAG;IACdJ,MAAM;IACNK,OAAO,EAAE,CAAC;EACd,CAAC;EACC,IAAIF,IAAI,KAAKG,SAAS,EAAE;IACtBF,OAAO,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,kBAAkB;IACpDD,OAAO,CAACG,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC;EACvC;EACE,IAAGF,KAAK,EAAE;IACRG,OAAO,CAACC,OAAO,CAAC,iBAAiB,CAAC,GAAGJ,KAAK;EAC5C;EAEA,IAAI;IACF,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAACb,IAAI,GAAGI,GAAG,EAAEE,OAAO,CAAC;IACjD,IAAIM,QAAQ,CAACE,EAAE,KAAK,IAAI,EAAE;MACxB;MACA;MACA;MACA,MAAMC,KAAK,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;MACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACG,OAAO,CAAC;IAChC;IACA,IAAIN,QAAQ,CAACO,MAAM,KAAK,GAAG,EAAE;MAC3B,OAAOP,QAAQ;IACjB,CAAC,MAAM;MACL,OAAOA,QAAQ,CAACI,IAAI,EAAE;IACxB;EACF,CAAC,CAAC,OAAOI,GAAG,EAAE;IACZC,KAAK,CAACD,GAAG,CAACF,OAAO,CAAC;IAClB,MAAME,GAAG;EACX;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,OAAO,MAAME,UAAU,GAAInB,KAAK,IAAK;EACjC,OAAO;IACHoB,GAAG,EAAEtB,OAAO,CAACuB,IAAI,CAAC,IAAI,EAAE,KAAK,EAAErB,KAAK,CAAC;IACrCsB,IAAI,EAAExB,OAAO,CAACuB,IAAI,CAAC,IAAI,EAAE,MAAM,EAAErB,KAAK,CAAC;IACvCuB,GAAG,EAAEzB,OAAO,CAACuB,IAAI,CAAC,IAAI,EAAE,KAAK,EAAErB,KAAK,CAAC;IACrCwB,KAAK,EAAE1B,OAAO,CAACuB,IAAI,CAAC,IAAI,EAAE,OAAO,EAAErB,KAAK,CAAC;IACzCyB,MAAM,EAAE3B,OAAO,CAACuB,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAErB,KAAK;EAC9C,CAAC;AACL,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAWR;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}