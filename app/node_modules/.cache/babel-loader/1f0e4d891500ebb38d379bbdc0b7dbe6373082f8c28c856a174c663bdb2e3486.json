{"ast":null,"code":"import { getUserData, setUserData, clearUserData } from './util.js';\nconst host = 'http://localhost:3030';\nasync function request(url, options) {\n  try {\n    const response = await fetch(host + url, options);\n    if (response.ok !== true) {\n      if (response.status === 403) {\n        clearUserData();\n      }\n      const error = await response.json();\n      throw new Error(error.message);\n    }\n    if (response.status === 204) {\n      return response;\n    } else {\n      return response.json();\n    }\n  } catch (err) {\n    alert(err.message);\n    throw err;\n  }\n}\nfunction createOptions() {\n  let method = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'get';\n  let token = arguments.length > 1 ? arguments[1] : undefined;\n  let data = arguments.length > 2 ? arguments[2] : undefined;\n  const options = {\n    method,\n    headers: {}\n  };\n  if (data !== undefined) {\n    options.headers['Content-Type'] = 'application/json';\n    options.body = JSON.stringify(data);\n  }\n  if (token) {\n    options.headers['X-Authorization'] = token;\n  }\n  // const userData = getUserData();\n  // if (userData != null) {\n  //   options.headers['X-Authorization'] = userData.token;\n  // }\n  return options;\n}\nexport async function get(url, token) {\n  return request(url, createOptions('get', token));\n}\nexport async function post(url, token, data) {\n  return request(url, createOptions('post', token, data));\n}\nexport async function put(url, token, data) {\n  return request(url, createOptions('put', token, data));\n}\nexport async function del(url, token) {\n  return request(url, createOptions('delete', token));\n}\n\n// export const apiFactory = (token) => {\n//   return {\n//       get: request.bind(null, 'GET', token),\n//       post: request.bind(null, 'POST', token),\n//       put: request.bind(null, 'PUT', token),\n//       patch: request.bind(null, 'PATCH', token),\n//       delete: request.bind(null, 'DELETE', token),\n//   }\n// };\n\n//  const request = async(method, url, data) => {\n\n//     const options = {};\n//     if (method !== 'GET') {\n//         options.method = method;\n\n//         if (data) {\n//             options.headers = {\n//                 'content-type': 'application/json',\n//             }\n//             options.body = JSON.stringify(data);\n//         }\n\n//     }\n\n//     const response = await fetch(url, options);\n\n//     try {\n//         const result = await response.json();\n//         return result;\n//     } catch (error) {\n//         return {};\n//     }\n// }\n\n//  const get = request.bind(null,'GET');\n//  const post = request.bind(null,'POST');\n//  const put = request.bind(null,'PUT');\n//  const patch = request.bind(null,'PATCH');\n//  const remove = request.bind(null,'DELETE');\n\n//  export {\n//      get,\n//      post,\n//      put,\n//      patch,\n//      remove\n//  }","map":{"version":3,"names":["getUserData","setUserData","clearUserData","host","request","url","options","response","fetch","ok","status","error","json","Error","message","err","alert","createOptions","method","arguments","length","undefined","token","data","headers","body","JSON","stringify","get","post","put","del"],"sources":["/Users/alexpetrov/JavaScript/ReactApps/projectChefSteps copy/client/src/services/api.js"],"sourcesContent":["import { getUserData, setUserData, clearUserData } from './util.js' \n\nconst host = 'http://localhost:3030';\n\nasync function request(url, options) {\n  try {\n    const response = await fetch(host + url, options);\n    if (response.ok !== true) {\n      if (response.status === 403) {\n        clearUserData();\n      }\n      const error = await response.json();\n      throw new Error(error.message);\n    }\n    if (response.status === 204) {\n      return response;\n    } else {\n      return response.json();\n    }\n  } catch (err) {\n    alert(err.message);\n    throw err;\n  }\n}\n\nfunction createOptions(method = 'get', token, data) {\n  const options = {\n    method,\n    headers: {}\n};\n  if (data !== undefined) {\n    options.headers['Content-Type'] = 'application/json';\n    options.body = JSON.stringify(data);\n}\n  if(token) {\n    options.headers['X-Authorization'] = token;\n  }\n  // const userData = getUserData();\n  // if (userData != null) {\n  //   options.headers['X-Authorization'] = userData.token;\n  // }\n  return options;\n}\n\n\n  export async function get(url, token) {\n      return request(url, createOptions('get', token));\n      }\n  export async function post(url, token, data) {\n      return request(url, createOptions('post', token, data));\n      }\n  export async function put(url, token, data) {\n      return request(url, createOptions('put', token, data));\n      }\n  export async function del(url, token) {\n      return request(url, createOptions('delete', token));\n      }\n        \n        // export const apiFactory = (token) => {\n        //   return {\n        //       get: request.bind(null, 'GET', token),\n        //       post: request.bind(null, 'POST', token),\n        //       put: request.bind(null, 'PUT', token),\n        //       patch: request.bind(null, 'PATCH', token),\n        //       delete: request.bind(null, 'DELETE', token),\n        //   }\n        // };\n\n\n\n\n\n\n\n\n\n\n//  const request = async(method, url, data) => {\n\n//     const options = {};\n//     if (method !== 'GET') {\n//         options.method = method;\n\n//         if (data) {\n//             options.headers = {\n//                 'content-type': 'application/json',\n//             }\n//             options.body = JSON.stringify(data);\n//         }\n\n//     }\n\n//     const response = await fetch(url, options);\n\n//     try {\n//         const result = await response.json();\n//         return result;\n//     } catch (error) {\n//         return {};\n//     }\n// }\n\n//  const get = request.bind(null,'GET');\n//  const post = request.bind(null,'POST');\n//  const put = request.bind(null,'PUT');\n//  const patch = request.bind(null,'PATCH');\n//  const remove = request.bind(null,'DELETE');\n\n//  export {\n//      get,\n//      post,\n//      put,\n//      patch,\n//      remove\n//  }"],"mappings":"AAAA,SAASA,WAAW,EAAEC,WAAW,EAAEC,aAAa,QAAQ,WAAW;AAEnE,MAAMC,IAAI,GAAG,uBAAuB;AAEpC,eAAeC,OAAOA,CAACC,GAAG,EAAEC,OAAO,EAAE;EACnC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,IAAI,GAAGE,GAAG,EAAEC,OAAO,CAAC;IACjD,IAAIC,QAAQ,CAACE,EAAE,KAAK,IAAI,EAAE;MACxB,IAAIF,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;QAC3BR,aAAa,EAAE;MACjB;MACA,MAAMS,KAAK,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;MACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACG,OAAO,CAAC;IAChC;IACA,IAAIP,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;MAC3B,OAAOH,QAAQ;IACjB,CAAC,MAAM;MACL,OAAOA,QAAQ,CAACK,IAAI,EAAE;IACxB;EACF,CAAC,CAAC,OAAOG,GAAG,EAAE;IACZC,KAAK,CAACD,GAAG,CAACD,OAAO,CAAC;IAClB,MAAMC,GAAG;EACX;AACF;AAEA,SAASE,aAAaA,CAAA,EAA8B;EAAA,IAA7BC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAAA,IAAEG,KAAK,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAA,IAAEE,IAAI,GAAAJ,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAChD,MAAMf,OAAO,GAAG;IACdY,MAAM;IACNM,OAAO,EAAE,CAAC;EACd,CAAC;EACC,IAAID,IAAI,KAAKF,SAAS,EAAE;IACtBf,OAAO,CAACkB,OAAO,CAAC,cAAc,CAAC,GAAG,kBAAkB;IACpDlB,OAAO,CAACmB,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC;EACvC;EACE,IAAGD,KAAK,EAAE;IACRhB,OAAO,CAACkB,OAAO,CAAC,iBAAiB,CAAC,GAAGF,KAAK;EAC5C;EACA;EACA;EACA;EACA;EACA,OAAOhB,OAAO;AAChB;AAGE,OAAO,eAAesB,GAAGA,CAACvB,GAAG,EAAEiB,KAAK,EAAE;EAClC,OAAOlB,OAAO,CAACC,GAAG,EAAEY,aAAa,CAAC,KAAK,EAAEK,KAAK,CAAC,CAAC;AAChD;AACJ,OAAO,eAAeO,IAAIA,CAACxB,GAAG,EAAEiB,KAAK,EAAEC,IAAI,EAAE;EACzC,OAAOnB,OAAO,CAACC,GAAG,EAAEY,aAAa,CAAC,MAAM,EAAEK,KAAK,EAAEC,IAAI,CAAC,CAAC;AACvD;AACJ,OAAO,eAAeO,GAAGA,CAACzB,GAAG,EAAEiB,KAAK,EAAEC,IAAI,EAAE;EACxC,OAAOnB,OAAO,CAACC,GAAG,EAAEY,aAAa,CAAC,KAAK,EAAEK,KAAK,EAAEC,IAAI,CAAC,CAAC;AACtD;AACJ,OAAO,eAAeQ,GAAGA,CAAC1B,GAAG,EAAEiB,KAAK,EAAE;EAClC,OAAOlB,OAAO,CAACC,GAAG,EAAEY,aAAa,CAAC,QAAQ,EAAEK,KAAK,CAAC,CAAC;AACnD;;AAEE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAWR;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}