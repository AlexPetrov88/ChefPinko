{"ast":null,"code":"const requester = async (method, url, data) => {\n  const options = {};\n  if (method !== 'GET') {\n    options.method = method;\n    if (data) {\n      options.headers = {\n        'content-type': 'application/json'\n      };\n      options.body = JSON.stringify(data);\n    }\n  }\n  const serializedAuth = localStorage.getItem('auth');\n  if (serializedAuth) {\n    const auth = JSON.parse(serializedAuth);\n    if (auth.accessToken) {\n      options.headers = {\n        ...options.headers,\n        'X-Authorization': auth.accessToken\n      };\n    }\n  }\n  const response = await fetch(url, options);\n  if (response.status === 204) {\n    return {};\n  }\n  const result = await response.json();\n  if (!response.ok) {\n    throw result;\n  }\n  return result;\n};\nexport const requestFactory = () => {\n  return {\n    get: requester.bind(null, 'GET'),\n    post: requester.bind(null, 'POST'),\n    put: requester.bind(null, 'PUT'),\n    patch: requester.bind(null, 'PATCH'),\n    delete: requester.bind(null, 'DELETE')\n  };\n};\n\n// import { getUserData, setUserData, clearUserData } from './util.js' \n\n// const host = 'http://localhost:3030';\n\n// async function request(url, options) {\n//   try {\n//     const response = await fetch(host + url, options);\n//     // console.log(response);\n//     if (response.ok !== true) {\n//       if (response.status === 403) {\n//         clearUserData();\n//       }\n//       console.log(`13line response`);\n//       console.log(response);\n//       const error = await response.json();\n//       console.log(`15line errors ${error}`);\n//       console.log(error);\n//       console.log(`16liene options ${options}`);\n//       console.log(options);\n//       throw new Error(error.message);\n//     }\n//     if (response.status === 204) {\n//       return response;\n//     } else {\n//       return response.json();\n//     }\n//   } catch (err) {\n//     alert(err.message);\n//     throw err;\n//   }\n// }\n\n// function createOptions(method = 'get', data) {\n//   const options = {\n//     method,\n//     headers: {}\n// };\n//   if (data !== undefined) {\n//     options.headers['Content-Type'] = 'application/json';\n//     options.body = JSON.stringify(data);\n// }\n//   const userData = getUserData();\n//   console.log(`userData befor`);\n//   console.log(userData);\n//   if (userData != null) {\n//   console.log(`userData after`);\n//   console.log(userData);\n//     options.headers['X-Authorization'] = userData.token;\n//   }\n//   return options;\n// }\n\n// export async function get(url) {\n//   return request(url, createOptions());\n// }\n// export async function post(url, data) {\n//   return request(url, createOptions('post', data));\n// }\n// export async function put(url, data) {\n//   return request(url, createOptions('put', data));\n// }\n// export async function del(url) {\n//   return request(url, createOptions('delete'));\n// }\n\n// export async function login(email, password) {\n//   const result = await post('/users/login', { email, password });\n//   const userData = {\n//   email: result.email,\n//   id: result._id,\n//   token: result.accessToken\n//   };\n//   setUserData(userData);\n//   return userData;\n// }\n\n// export async function register(email, password) {\n//   const result = await post('/users/register', {email, password});\n//   const userData = {\n//   email: result.email, \n//   id: result._id, \n//   token: result.accessToken,\n//   };\n//   setUserData(userData);\n//   return userData;\n// }\n\n// export async function logout() {\n//   await get('/users/logout'); \n//   clearUserData();\n// }","map":{"version":3,"names":["requester","method","url","data","options","headers","body","JSON","stringify","serializedAuth","localStorage","getItem","auth","parse","accessToken","response","fetch","status","result","json","ok","requestFactory","get","bind","post","put","patch","delete"],"sources":["/Users/alexpetrov/Documents/GitTesting/ChefPinko copy/app/src/services/api.js"],"sourcesContent":["const requester = async (method, url, data) => {\n  const options = {};\n\n  if (method !== 'GET') {\n      options.method = method;\n\n      if (data) {\n          options.headers = {\n              'content-type': 'application/json',\n          };\n\n          options.body = JSON.stringify(data);\n      }\n  }\n\n  const serializedAuth = localStorage.getItem('auth');\n  if (serializedAuth) {\n      const auth = JSON.parse(serializedAuth);\n      \n      if (auth.accessToken) {\n          options.headers = {\n              ...options.headers,\n              'X-Authorization': auth.accessToken,\n          };\n      }\n  }\n\n  const response = await fetch(url, options);\n\n  if (response.status === 204) {\n      return {};\n  }\n\n  const result = await response.json();\n\n  if (!response.ok) {\n      throw result;\n  }\n\n  return result;\n};\n\nexport const requestFactory = () => {\n  return {\n      get: requester.bind(null, 'GET'),\n      post: requester.bind(null, 'POST'),\n      put: requester.bind(null, 'PUT'),\n      patch: requester.bind(null, 'PATCH'),\n      delete: requester.bind(null, 'DELETE'),\n  }\n};\n\n\n\n\n// import { getUserData, setUserData, clearUserData } from './util.js' \n\n// const host = 'http://localhost:3030';\n\n// async function request(url, options) {\n//   try {\n//     const response = await fetch(host + url, options);\n//     // console.log(response);\n//     if (response.ok !== true) {\n//       if (response.status === 403) {\n//         clearUserData();\n//       }\n//       console.log(`13line response`);\n//       console.log(response);\n//       const error = await response.json();\n//       console.log(`15line errors ${error}`);\n//       console.log(error);\n//       console.log(`16liene options ${options}`);\n//       console.log(options);\n//       throw new Error(error.message);\n//     }\n//     if (response.status === 204) {\n//       return response;\n//     } else {\n//       return response.json();\n//     }\n//   } catch (err) {\n//     alert(err.message);\n//     throw err;\n//   }\n// }\n\n// function createOptions(method = 'get', data) {\n//   const options = {\n//     method,\n//     headers: {}\n// };\n//   if (data !== undefined) {\n//     options.headers['Content-Type'] = 'application/json';\n//     options.body = JSON.stringify(data);\n// }\n//   const userData = getUserData();\n//   console.log(`userData befor`);\n//   console.log(userData);\n//   if (userData != null) {\n//   console.log(`userData after`);\n//   console.log(userData);\n//     options.headers['X-Authorization'] = userData.token;\n//   }\n//   return options;\n// }\n\n// export async function get(url) {\n//   return request(url, createOptions());\n// }\n// export async function post(url, data) {\n//   return request(url, createOptions('post', data));\n// }\n// export async function put(url, data) {\n//   return request(url, createOptions('put', data));\n// }\n// export async function del(url) {\n//   return request(url, createOptions('delete'));\n// }\n\n// export async function login(email, password) {\n//   const result = await post('/users/login', { email, password });\n//   const userData = {\n//   email: result.email,\n//   id: result._id,\n//   token: result.accessToken\n//   };\n//   setUserData(userData);\n//   return userData;\n// }\n\n// export async function register(email, password) {\n//   const result = await post('/users/register', {email, password});\n//   const userData = {\n//   email: result.email, \n//   id: result._id, \n//   token: result.accessToken,\n//   };\n//   setUserData(userData);\n//   return userData;\n// }\n\n// export async function logout() {\n//   await get('/users/logout'); \n//   clearUserData();\n// }"],"mappings":"AAAA,MAAMA,SAAS,GAAG,MAAAA,CAAOC,MAAM,EAAEC,GAAG,EAAEC,IAAI,KAAK;EAC7C,MAAMC,OAAO,GAAG,CAAC,CAAC;EAElB,IAAIH,MAAM,KAAK,KAAK,EAAE;IAClBG,OAAO,CAACH,MAAM,GAAGA,MAAM;IAEvB,IAAIE,IAAI,EAAE;MACNC,OAAO,CAACC,OAAO,GAAG;QACd,cAAc,EAAE;MACpB,CAAC;MAEDD,OAAO,CAACE,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACL,IAAI,CAAC;IACvC;EACJ;EAEA,MAAMM,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EACnD,IAAIF,cAAc,EAAE;IAChB,MAAMG,IAAI,GAAGL,IAAI,CAACM,KAAK,CAACJ,cAAc,CAAC;IAEvC,IAAIG,IAAI,CAACE,WAAW,EAAE;MAClBV,OAAO,CAACC,OAAO,GAAG;QACd,GAAGD,OAAO,CAACC,OAAO;QAClB,iBAAiB,EAAEO,IAAI,CAACE;MAC5B,CAAC;IACL;EACJ;EAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACd,GAAG,EAAEE,OAAO,CAAC;EAE1C,IAAIW,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;IACzB,OAAO,CAAC,CAAC;EACb;EAEA,MAAMC,MAAM,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;EAEpC,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;IACd,MAAMF,MAAM;EAChB;EAEA,OAAOA,MAAM;AACf,CAAC;AAED,OAAO,MAAMG,cAAc,GAAGA,CAAA,KAAM;EAClC,OAAO;IACHC,GAAG,EAAEtB,SAAS,CAACuB,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC;IAChCC,IAAI,EAAExB,SAAS,CAACuB,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC;IAClCE,GAAG,EAAEzB,SAAS,CAACuB,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC;IAChCG,KAAK,EAAE1B,SAAS,CAACuB,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC;IACpCI,MAAM,EAAE3B,SAAS,CAACuB,IAAI,CAAC,IAAI,EAAE,QAAQ;EACzC,CAAC;AACH,CAAC;;AAKD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}