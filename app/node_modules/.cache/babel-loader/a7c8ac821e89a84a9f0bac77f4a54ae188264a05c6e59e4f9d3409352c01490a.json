{"ast":null,"code":"import { getUserData, setUserData, clearUserData } from './util.js';\nconst host = 'http://localhost:3030';\nasync function request(url, options) {\n  try {\n    const response = await fetch(host + url, options);\n    if (response.ok !== true) {\n      if (response.status === 403) {\n        clearUserData();\n      }\n      const error = await response.json();\n      throw new Error(error.message);\n    }\n    if (response.status === 204) {\n      return response;\n    } else {\n      return response.json();\n    }\n  } catch (err) {\n    throw err;\n  }\n}\nfunction createOptions() {\n  let method = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'get';\n  let data = arguments.length > 1 ? arguments[1] : undefined;\n  const options = {\n    method,\n    headers: {}\n  };\n  if (data !== undefined) {\n    options.headers['Content-Type'] = 'application/json';\n    options.body = JSON.stringify(data);\n  }\n  const userData = getUserData();\n  if (userData != null) {\n    options.headers['X-Authorization'] = userData.token;\n  }\n  return options;\n}\nexport async function get(url) {\n  return request(url, createOptions());\n}\nexport async function post(url, data) {\n  return request(url, createOptions('post', data));\n}\nexport async function put(url, data) {\n  return request(url, createOptions('put', data));\n}\nexport async function del(url) {\n  return request(url, createOptions('delete'));\n}\nexport async function login(email, password) {\n  const result = await post('/users/login', {\n    email,\n    password\n  });\n  const userData = {\n    email: result.email,\n    id: result._id,\n    token: result.accessToken\n  };\n  setUserData(userData);\n  return userData;\n}\nexport async function register(email, password) {\n  const result = await post('/users/register', {\n    email,\n    password\n  });\n  const userData = {\n    email: result.email,\n    id: result._id,\n    token: result.accessToken\n  };\n  setUserData(userData);\n  return userData;\n}\nexport async function logout() {\n  await get('/users/logout');\n  clearUserData();\n}\n\n//  const request = async(method, url, data) => {\n\n//     const options = {};\n//     if (method !== 'GET') {\n//         options.method = method;\n\n//         if (data) {\n//             options.headers = {\n//                 'content-type': 'application/json',\n//             }\n//             options.body = JSON.stringify(data);\n//         }\n\n//     }\n\n//     const response = await fetch(url, options);\n\n//     try {\n//         const result = await response.json();\n//         return result;\n//     } catch (error) {\n//         return {};\n//     }\n// }\n\n//  const get = request.bind(null,'GET');\n//  const post = request.bind(null,'POST');\n//  const put = request.bind(null,'PUT');\n//  const patch = request.bind(null,'PATCH');\n//  const remove = request.bind(null,'DELETE');\n\n//  export {\n//      get,\n//      post,\n//      put,\n//      patch,\n//      remove\n//  }","map":{"version":3,"names":["getUserData","setUserData","clearUserData","host","request","url","options","response","fetch","ok","status","error","json","Error","message","err","createOptions","method","arguments","length","undefined","data","headers","body","JSON","stringify","userData","token","get","post","put","del","login","email","password","result","id","_id","accessToken","register","logout"],"sources":["/Users/alexpetrov/Documents/GitTesting/ChefPinko copy copy/app/src/services/api.js"],"sourcesContent":["import { getUserData, setUserData, clearUserData } from './util.js' \n\nconst host = 'http://localhost:3030';\n\nasync function request(url, options) {\n  try {\n    const response = await fetch(host + url, options);\n    if (response.ok !== true) {\n      if (response.status === 403) {\n        clearUserData();\n      }\n      const error = await response.json();\n      throw new Error(error.message);\n    }\n    if (response.status === 204) {\n      return response;\n    } else {\n      return response.json();\n    }\n  } catch (err) {\n        throw err;\n  }\n}\n\nfunction createOptions(method = 'get', data) {\n  const options = {\n    method,\n    headers: {}\n};\n  if (data !== undefined) {\n    options.headers['Content-Type'] = 'application/json';\n    options.body = JSON.stringify(data);\n}\n  const userData = getUserData();\n  if (userData != null) {\n    options.headers['X-Authorization'] = userData.token;\n  }\n  return options;\n}\n\nexport async function get(url) {\n  return request(url, createOptions());\n}\nexport async function post(url, data) {\n  return request(url, createOptions('post', data));\n}\nexport async function put(url, data) {\n  return request(url, createOptions('put', data));\n}\nexport async function del(url) {\n  return request(url, createOptions('delete'));\n}\n\nexport async function login(email, password) {\n  const result = await post('/users/login', { email, password });\n  const userData = {\n  email: result.email,\n  id: result._id,\n  token: result.accessToken\n  };\n  setUserData(userData);\n  return userData;\n}\n\nexport async function register(email, password) {\n  const result = await post('/users/register', {email, password});\n  const userData = {\n  email: result.email, \n  id: result._id, \n  token: result.accessToken,\n  };\n  setUserData(userData);\n  return userData;\n}\n\nexport async function logout() {\n  await get('/users/logout'); \n  clearUserData();\n}\n\n\n\n//  const request = async(method, url, data) => {\n\n//     const options = {};\n//     if (method !== 'GET') {\n//         options.method = method;\n\n//         if (data) {\n//             options.headers = {\n//                 'content-type': 'application/json',\n//             }\n//             options.body = JSON.stringify(data);\n//         }\n\n//     }\n\n//     const response = await fetch(url, options);\n\n//     try {\n//         const result = await response.json();\n//         return result;\n//     } catch (error) {\n//         return {};\n//     }\n// }\n\n//  const get = request.bind(null,'GET');\n//  const post = request.bind(null,'POST');\n//  const put = request.bind(null,'PUT');\n//  const patch = request.bind(null,'PATCH');\n//  const remove = request.bind(null,'DELETE');\n\n//  export {\n//      get,\n//      post,\n//      put,\n//      patch,\n//      remove\n//  }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}